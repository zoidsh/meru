diff --git a/dist/source/index.d.ts b/dist/source/index.d.ts
index 921db5c7ae623eba8029b268928567b19aff69d7..d696775d9aff4c67c67580301f76fde6de2a6d9b 100644
--- a/dist/source/index.d.ts
+++ b/dist/source/index.d.ts
@@ -13,10 +13,6 @@ export default class Conf<T extends Record<string, any> = Record<string, unknown
     Tip: To get all items, see `.store`.
     */
     get<Key extends keyof T>(key: Key): T[Key];
-    get<Key extends keyof T>(key: Key, defaultValue: Required<T>[Key]): Required<T>[Key];
-    get<Key extends DotNotationKeyOf<T>>(key: Key): DotNotationValueOf<T, Key>;
-    get<Key extends DotNotationKeyOf<T>>(key: Key, defaultValue: NonNullable<DotNotationValueOf<T, Key>>): NonNullable<DotNotationValueOf<T, Key>>;
-    get<Key extends string, Value = unknown>(key: Exclude<Key, DotNotationKeyOf<T>>, defaultValue?: Value): Value;
     /**
     Set an item or multiple items at once.
 
@@ -24,16 +20,12 @@ export default class Conf<T extends Record<string, any> = Record<string, unknown
     @param value - Must be JSON serializable. Trying to set the type `undefined`, `function`, or `symbol` will result in a `TypeError`.
     */
     set<Key extends keyof T>(key: Key, value?: T[Key]): void;
-    set<Key extends DotNotationKeyOf<T>>(key: Key, Value?: DotNotationValueOf<T, Key>): void;
-    set(key: string, value: unknown): void;
-    set(object: PartialObjectDeep<T>): void;
     /**
     Check if an item exists.
 
     @param key - The key of the item to check.
     */
     has<Key extends keyof T>(key: Key): boolean;
-    has<Key extends DotNotationKeyOf<T>>(key: Key): boolean;
     /**
     Reset items to their default values, as defined by the `defaults` or `schema` option.
 
@@ -48,7 +40,6 @@ export default class Conf<T extends Record<string, any> = Record<string, unknown
     @param key - The key of the item to delete.
     */
     delete<Key extends keyof T>(key: Key): void;
-    delete<Key extends DotNotationKeyOf<T>>(key: Key): void;
     /**
     Delete all items.
 
@@ -63,7 +54,6 @@ export default class Conf<T extends Record<string, any> = Record<string, unknown
     @returns A function, that when called, will unsubscribe.
     */
     onDidChange<Key extends keyof T>(key: Key, callback: OnDidChangeCallback<T[Key]>): Unsubscribe;
-    onDidChange<Key extends DotNotationKeyOf<T>>(key: Key, callback: OnDidChangeCallback<DotNotationValueOf<T, Key>>): Unsubscribe;
     /**
     Watches the whole config object, calling `callback` on any changes.
 
